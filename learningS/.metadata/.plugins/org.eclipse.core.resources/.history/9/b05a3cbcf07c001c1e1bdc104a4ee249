package sampleMvnProject.sampleMvnProject;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Hello world!
 *
 */
public class App {

	int size = 7;
	int[] a = new int[size];

	public static final String SYNONYMS = "synonyms";
	public static final String DIFFERENT = "different";

	public static void main(String[] args) throws IOException {

		int[] arr = { 4, 2, 6, 3, 7, 1, 5 };
		
		insertionSort(arr);

	}

	// BINARY SEARCH
	public int binarySearch() {

		int low = 0;
		int high = size - 1;
		int mid = 0;
		int number = 4;
		while (low <= high) {
			mid = (low + high) / 2;
			if (number == a[mid]) {
				return mid;
			} else if (number < a[mid]) {
				high = mid - 1;
			} else if (number > a[mid]) {
				low = mid + 1;
			}
		}
		return -1;
	}

	public int searchOrInsertSorted(int n) {
		for (int i = 0; i < size; i++) {
			if (a[i] == n) {
				return i;
			} else if (a[i] > n) {
				return i - 1;
			}
		}
		return size;
	}

	// Bubble sort
	public void bubbleSort() {
		int temp;
		boolean swap;
		for (int i = 0; i < size - 1; i++) {
			swap = false;
			for (int j = 0; j < size - i - 1; j++) {
				if (a[j] > a[j + 1]) {
					temp = a[j];
					a[j] = a[i];
					a[i] = temp;
					swap = true;
				}
			}
			if (swap = false) {
				break;
			}
		}
	}

	// Selection sort
	public void selectionSort() {
		for (int i = 0; i < a.length - 1; i++) {
			int minIndex = i;
			for (int j = i + 1; j < a.length - i - 1; j++) {
				if (a[j] < a[minIndex]) {
					minIndex = j;// searching for lowest index
				}
			}
			int smallerNumber = a[minIndex];
			a[minIndex] = a[i];
			a[i] = smallerNumber;
		}
	}

	// Insertion sort
	public static void insertionSort(int[] arr) {
		int j = 0;
		for (int i = 1; i < arr.length; i++) {
			int temp = arr[i];
			j = i - 1;
			while (j >= 0 && temp < arr[j]) {
				arr[j + 1] = arr[j];
				j--;
			}
			arr[j+1] = temp;
		}
		printArr(arr);
	}

	private static void printArr(int[] arr) {
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
		
	}
}
